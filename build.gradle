plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.+'
    id 'co.uzzu.dotenv.gradle' version "4.0.0"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.mod_id
}

repositories {
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.terraformersmc.com/releases/" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter { includeGroup "maven.modrinth" }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/caligo.accesswidener")
}

fabricApi {
    configureDataGeneration()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // FABRIC ASM
    include modImplementation("com.github.Chocohead:Fabric-ASM:2.3")
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation "maven.modrinth:carpet:${carpet_version}"
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    filteringCharset "UTF-8"

    var replaceProperties = [
            version                : project.version,
            minecraft_version      : minecraft_version,
            min_minecraft_version  : min_minecraft_version,
            loader_version         : loader_version,
            mod_id                 : mod_id
    ]

    inputs.properties replaceProperties
    filesMatching("fabric.mod.json") {
        expand replaceProperties
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
    token = env.fetchOrNull('MODRINTH')
    projectId = 'SdEvidHA'
    versionNumber = project.mod_version
    versionName = "a${project.mod_version}"
    versionType = "alpha"
    uploadFile = remapJar
    gameVersions = [project.minecraft_version, project.min_minecraft_version]
    loaders = ['fabric']
    dependencies = [
            new ModDependency('P7dR8mSH', 'required')
    ]
    changelog = file('changelog.md').text
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = env.fetchOrNull('CURSEFORGE')

    def mainFile = upload(996454, remapJar)
    mainFile.changelog = file('changelog.md')
    mainFile.displayName = "a${project.mod_version}"
    mainFile.addModLoader("fabric")
    mainFile.releaseType = "alpha"
    mainFile.addEnvironment("client", "server")
}